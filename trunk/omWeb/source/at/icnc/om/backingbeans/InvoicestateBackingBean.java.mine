package at.icnc.om.backingbeans;


import java.util.ArrayList;

import at.icnc.om.entitybeans.TblInvoicestate;

import com.icesoft.faces.component.ext.RowSelectorEvent;

/**
 * Implementation of invoicestateLister
 * 
 * @author csh80, nkn80, cma80
 *
 */
public class InvoicestateBackingBean extends AbstractBean{
	
	// Variable to save selected Invoicestate
	private TblInvoicestate curInvoicestate = new TblInvoicestate();
	
	// List with all Invoices to avoid constant DB-Reading
	private ArrayList<TblInvoicestate> invoicestates;
	
	/*
	 * ______________________________________________________________________________
	 * EntityLister functions
	 */
	
	/**
	 * This functions returns a list with all invoicestates
	 * @return invoicestates
	 */
	@SuppressWarnings("unchecked")
	public ArrayList<TblInvoicestate> getInvoicestateList(){		
		
		/* Invoices are only read out of DB if they were not read before 
		 * avoids unnecessary data traffic 
		 */
		if (invoicestates == null) {
			invoicestates = new ArrayList<TblInvoicestate>();
			invoicestates.addAll((ArrayList<TblInvoicestate>) 
					entityLister.getObjectList(TblInvoicestate.class));
		}
		
		/* Makes the user know which invoice is selected (it is shaded) */
		if (curInvoicestate != null) {
			for(TblInvoicestate curItem : invoicestates) {				
				if(curItem.getIdInvoicestate() == curInvoicestate.getIdInvoicestate()) {
					curItem.setSelected(true);
				}
			}
		}		
		
		return invoicestates;
	}	
	
	/**
	 * This method captures a RowSelectorEvent
	 * It is called when clicked on element in DataTable
	 * @param re
	 */
	@Override
	public void rowEvent(RowSelectorEvent re) {		
		
		/* If no invoicestate is selected, curInvoicestate is set to selected
		 * otherwise the invoicestate is unselected
		 */
		if(getCurInvoiceState() != null){			
			if(getCurInvoiceState().getIdInvoicestate() == invoicestates.get(re.getRow()).getIdInvoicestate()){
				setCurInvoiceState(new TblInvoicestate());
				setVisible(false);
			}else {
				setCurInvoiceState(invoicestates.get(re.getRow()));
				setVisible(true);
			}
		}
	}	

	/* Setter for currently selected invoicestate */
	public void setCurInvoiceState(TblInvoicestate curInvoicestate) {
		this.curInvoicestate = curInvoicestate;
	}
	
	/* Getter for currently selected invoicestate */
	public TblInvoicestate getCurInvoiceState() {
		return curInvoicestate;
	}	
	
	/**
	 * init Method
	 * resets all lists with db-content
	 * closes all popups
	 * goes back to first page
	 * resets curInvoicestate
	 */
	@Override
	public void init() {		
		setCurInvoiceState(new TblInvoicestate());
		getCurInvoiceState().setIdInvoicestate(0);
		paginator.gotoFirstPage();
		refresh();
		clearFilter();
	}

	/**
	 * Lists with DB-content are set NULL to
	 * make sure they are read from DB
	 */	
	@Override
	public void refresh() {
		visible = !(getCurInvoiceState().getIdInvoicestate() == 0);
		invoicestates = null;
		popupRender = false;
		filterpopupRender = false;
		setDeletePopupRender(false);
	}
	
	//___________________________________________________________________________
	//Filterpopup Methoden

	/*Fields declarations for the Filter*/
	private String invoicestate;
	
	/* Start of the Getter and Setter Methods for the Filter*/
	public void setInvoicestate(String invoicestate) {
		this.invoicestate = invoicestate;
	}

	public String getInvoicestate() {
		return invoicestate;
	}
	/*End of the Getter and Setter Methods for the Filter*/
	
	/**
	 * Filter Method
	 * add the filter values and the columns to ArrayLists
	 * create the Join-Statement
	 * calls the "getFilterList" Method from the EntityLister to get the filterlist
	 */
	public void Filtern() {
		/*ArrayList which managed the filter values*/
		ArrayList<String> werte = new ArrayList<String>();
		/*ArrayList which managed the filter columns*/
		ArrayList<String> spalte= new ArrayList<String>();
		/*Field with contains the Joinstatement*/
		String joinStatement="";
		
		if(invoicestate != null && invoicestate!=""){
			werte.add(invoicestate);
			spalte.add("i.descriptionIs");
			
			/*Add a part of the Joinstatement*/
			joinStatement +=" INNER JOIN t.tblInvoicestate i";
		}
		/*End Methods which check if the Fields are set and add them to the ArrayLists*/
		
		/*Try and Catch: Try to call the "getFilterList" Method and get the FilterList or catch to call the "init" Method*/
		try {
			/*Deletes the current Table*/
			invoicestates.clear();			
			invoicestates.addAll((ArrayList<TblInvoicestate>)entityLister.getFilterList(TblInvoicestate.class,"TblInvoicestate", joinStatement, werte, spalte));	
			/*Method to close the Popup*/
			changeFilterPopupRender();
		} catch (Exception e) {
			init();
			
			/*Deletes the current Table*/
			invoicestates.clear();
			
			/*Method to close the Popup*/
			changeFilterPopupRender();
		}	
	}	

	/**
	 * Deletes the current filter
	**/
	public void clearFilter(){
		invoicestate="";
	}	
	
	@Override
	public void deleteEntity(){
		entityLister.DeleteObject(curInvoicestate.getIdInvoicestate(), TblInvoicestate.class);
		refresh();
	}
	
	/**
	 * Updates currently selected invoice or creates new invoicestate
	 */
	@Override
	public void updateEntity(){
		entityLister.UpdateObject(TblInvoicestate.class, curInvoicestate, curInvoicestate.getIdInvoicestate());
		refresh();
	}
	
	/**
	 * Updates currently selected invoice or creates new invoicestate
	 */
	public void updateInvoicestate(){
		entityLister.UpdateObject(TblInvoicestate.class, curInvoicestate, curInvoicestate.getIdInvoicestate());
		refresh();
	}
	
	/**
	 * Method to open popup to create new Invoicestate
	 */
	public void changePopupRenderNew(){
		
		/* New invoicestate is initialized */ 
		setCurInvoiceState(new TblInvoicestate());
		/* ID of new invoicestate is set to 0 (important for EntityManager) */
		getCurInvoiceState().setIdInvoicestate(0);
		
		/* Makes popup visible */
		changePopupRender();
	}
	
	/**
	 * Deletes currently selected invoicestate
	 */
	public void deleteInvoicestate(){
		entityLister.DeleteObject(curInvoicestate.getIdInvoicestate(), TblInvoicestate.class);
		curInvoicestate = new TblInvoicestate();
		getCurInvoiceState().setIdInvoicestate(0);
		refresh();
	}	
}